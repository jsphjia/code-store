C0 C0 FF EE       # magic number
00 17             # version 11, arch = 1 (64 bits)

00 02             # int pool count
# int pool
7F FF FF FF
80 00 00 00

00 6D             # string pool total size
# string pool
53 53 41 20 6C 65 6E 67 74 68 3D 00  # "SSA length="
3B 20 64 61 74 61 3D 5B 00  # "; data=["
00  # ""
00  # ""
2C 20 00  # ", "
5D 00  # "]"
53 53 41 3A 20 5B 00  # "SSA: ["
00  # ""
00  # ""
2C 20 00  # ", "
5D 00  # "]"
0A 00  # "\n"
00  # ""
20 3D 3E 20 00  # " => "
0A 00  # "\n"
68 65 6C 6C 6F 00  # "hello"
77 6F 72 6C 64 00  # "world"
6E 65 77 00  # "new"
0A 00  # "\n"
0A 00  # "\n"
68 65 6C 6C 6F 00  # "hello"
77 6F 72 6C 64 00  # "world"
6E 65 77 00  # "new"
0A 00  # "\n"
41 6C 6C 20 74 65 73 74 73 20 70 61 73 73 65 64 21 0A 00  # "All tests passed!\n"

00 15             # function count
# function_pool

#<main>
00                # number of arguments = 0
02                # number of local variables = 2
00 A5             # code length = 165 bytes
10 03    # bipush 3           # 3
B8 00 12 # invokestatic 18    # ssa_new(3)
36 00    # vstore 0           # A = ssa_new(3);
15 00    # vload 0            # A
10 00    # bipush 0           # 0
14 00 34 # aldc 52            # s[52] = "hello"
B8 00 11 # invokestatic 17    # ssa_set(A, 0, "hello")
57       # pop                # (ignore result)
15 00    # vload 0            # A
B8 00 14 # invokestatic 20    # display_this_ssa(A)
57       # pop                # (ignore result)
15 00    # vload 0            # A
10 01    # bipush 1           # 1
14 00 3A # aldc 58            # s[58] = "world"
B8 00 11 # invokestatic 17    # ssa_set(A, 1, "world")
57       # pop                # (ignore result)
15 00    # vload 0            # A
B8 00 14 # invokestatic 20    # display_this_ssa(A)
57       # pop                # (ignore result)
15 00    # vload 0            # A
10 02    # bipush 2           # 2
14 00 40 # aldc 64            # s[64] = "new"
B8 00 11 # invokestatic 17    # ssa_set(A, 2, "new")
57       # pop                # (ignore result)
15 00    # vload 0            # A
B8 00 14 # invokestatic 20    # display_this_ssa(A)
57       # pop                # (ignore result)
15 00    # vload 0            # A
B8 00 0E # invokestatic 14    # ssa_print_internal(A)
57       # pop                # (ignore result)
14 00 44 # aldc 68            # s[68] = "\n"
B7 00 03 # invokenative 3     # print("\n")
57       # pop                # (ignore result)
15 00    # vload 0            # A
B8 00 13 # invokestatic 19    # ssa_print(A)
57       # pop                # (ignore result)
14 00 46 # aldc 70            # s[70] = "\n"
B7 00 03 # invokenative 3     # print("\n")
57       # pop                # (ignore result)
10 03    # bipush 3           # 3
B8 00 12 # invokestatic 18    # ssa_new(3)
36 01    # vstore 1           # B = ssa_new(3);
15 01    # vload 1            # B
10 00    # bipush 0           # 0
14 00 48 # aldc 72            # s[72] = "hello"
B8 00 11 # invokestatic 17    # ssa_set(B, 0, "hello")
57       # pop                # (ignore result)
15 01    # vload 1            # B
B8 00 14 # invokestatic 20    # display_this_ssa(B)
57       # pop                # (ignore result)
15 01    # vload 1            # B
10 00    # bipush 0           # 0
14 00 4E # aldc 78            # s[78] = "world"
B8 00 11 # invokestatic 17    # ssa_set(B, 0, "world")
57       # pop                # (ignore result)
15 01    # vload 1            # B
B8 00 14 # invokestatic 20    # display_this_ssa(B)
57       # pop                # (ignore result)
15 01    # vload 1            # B
10 00    # bipush 0           # 0
14 00 54 # aldc 84            # s[84] = "new"
B8 00 11 # invokestatic 17    # ssa_set(B, 0, "new")
57       # pop                # (ignore result)
15 01    # vload 1            # B
B8 00 14 # invokestatic 20    # display_this_ssa(B)
57       # pop                # (ignore result)
15 01    # vload 1            # B
B8 00 13 # invokestatic 19    # ssa_print(B)
57       # pop                # (ignore result)
14 00 58 # aldc 88            # s[88] = "\n"
B7 00 03 # invokenative 3     # print("\n")
57       # pop                # (ignore result)
14 00 5A # aldc 90            # s[90] = "All tests passed!\n"
B7 00 03 # invokenative 3     # print("All tests passed!\n")
57       # pop                # (ignore result)
10 00    # bipush 0           # 0
B0       # return             # 


#<int_size>
00                # number of arguments = 0
00                # number of local variables = 0
00 03             # code length = 3 bytes
10 04    # bipush 4           # 4
B0       # return             # 


#<int_max>
00                # number of arguments = 0
00                # number of local variables = 0
00 04             # code length = 4 bytes
13 00 00 # ildc 0             # c[0] = 2147483647
B0       # return             # 


#<int_min>
00                # number of arguments = 0
00                # number of local variables = 0
00 04             # code length = 4 bytes
13 00 01 # ildc 1             # c[1] = -2147483648
B0       # return             # 


#<abs>
01                # number of arguments = 1
01                # number of local variables = 1
00 15             # code length = 21 bytes
15 00    # vload 0            # x
10 00    # bipush 0           # 0
A1 00 06 # if_icmplt +6       # if (x < 0) goto <06:cond_true>
A7 00 0B # goto +11           # goto <07:cond_false>
# <06:cond_true>
10 00    # bipush 0           # 
15 00    # vload 0            # x
64       # isub               # -(x)
A7 00 05 # goto +5            # goto <08:cond_end>
# <07:cond_false>
15 00    # vload 0            # x
# <08:cond_end>
B0       # return             # 


#<max>
02                # number of arguments = 2
02                # number of local variables = 2
00 12             # code length = 18 bytes
15 00    # vload 0            # x
15 01    # vload 1            # y
A3 00 06 # if_icmpgt +6       # if (x > y) goto <00:cond_true>
A7 00 08 # goto +8            # goto <01:cond_false>
# <00:cond_true>
15 00    # vload 0            # x
A7 00 05 # goto +5            # goto <02:cond_end>
# <01:cond_false>
15 01    # vload 1            # y
# <02:cond_end>
B0       # return             # 


#<min>
02                # number of arguments = 2
02                # number of local variables = 2
00 12             # code length = 18 bytes
15 00    # vload 0            # x
15 01    # vload 1            # y
A3 00 06 # if_icmpgt +6       # if (x > y) goto <03:cond_true>
A7 00 08 # goto +8            # goto <04:cond_false>
# <03:cond_true>
15 01    # vload 1            # y
A7 00 05 # goto +5            # goto <05:cond_end>
# <04:cond_false>
15 00    # vload 0            # x
# <05:cond_end>
B0       # return             # 


#<int2hex>
01                # number of arguments = 1
04                # number of local variables = 4
00 52             # code length = 82 bytes
10 02    # bipush 2           # 2
B8 00 01 # invokestatic 1     # int_size()
68       # imul               # (2 * int_size())
36 01    # vstore 1           # digits = (2 * int_size());
15 01    # vload 1            # digits
10 01    # bipush 1           # 1
60       # iadd               # (digits + 1)
BC 01    # newarray 1         # alloc_array(char, (digits + 1))
36 02    # vstore 2           # s = alloc_array(char, (digits + 1));
15 02    # vload 2            # s
15 01    # vload 1            # digits
63       # aadds              # &s[digits]
10 00    # bipush 0           # '\000'
55       # cmstore            # s[digits] = '\0';
10 00    # bipush 0           # 0
36 03    # vstore 3           # i = 0;
# <17:loop>
15 03    # vload 3            # i
15 01    # vload 1            # digits
A1 00 06 # if_icmplt +6       # if (i < digits) goto <18:body>
A7 00 28 # goto +40           # goto <19:exit>
# <18:body>
15 02    # vload 2            # s
15 01    # vload 1            # digits
15 03    # vload 3            # i
64       # isub               # (digits - i)
10 01    # bipush 1           # 1
64       # isub               # ((digits - i) - 1)
63       # aadds              # &s[((digits - i) - 1)]
15 00    # vload 0            # x
10 0F    # bipush 15          # 15
7E       # iand               # (x & 15)
B8 00 08 # invokestatic 8     # hexdig2char((x & 15))
55       # cmstore            # s[((digits - i) - 1)] = hexdig2char((x & 15));
15 00    # vload 0            # x
10 04    # bipush 4           # 4
7A       # ishr               # (x >> 4)
36 00    # vstore 0           # x = (x >> 4);
15 03    # vload 3            # i
10 01    # bipush 1           # 1
60       # iadd               # 
36 03    # vstore 3           # i += 1;
A7 FF D4 # goto -44           # goto <17:loop>
# <19:exit>
15 02    # vload 2            # s
B7 00 02 # invokenative 2     # string_from_chararray(s)
B0       # return             # 


#<hexdig2char>
01                # number of arguments = 1
01                # number of local variables = 1
00 4C             # code length = 76 bytes
10 00    # bipush 0           # 0
15 00    # vload 0            # d
A4 00 06 # if_icmple +6       # if (0 <= d) goto <12:and>
A7 00 1C # goto +28           # goto <10:else>
# <12:and>
15 00    # vload 0            # d
10 0A    # bipush 10          # 10
A1 00 06 # if_icmplt +6       # if (d < 10) goto <09:then>
A7 00 12 # goto +18           # goto <10:else>
# <09:then>
10 30    # bipush 48          # '0'
B7 00 01 # invokenative 1     # char_ord('0')
15 00    # vload 0            # d
60       # iadd               # (char_ord('0') + d)
B7 00 00 # invokenative 0     # char_chr((char_ord('0') + d))
B0       # return             # 
A7 00 2C # goto +44           # goto <11:endif>
# <10:else>
10 0A    # bipush 10          # 10
15 00    # vload 0            # d
A4 00 06 # if_icmple +6       # if (10 <= d) goto <16:and>
A7 00 1F # goto +31           # goto <14:else>
# <16:and>
15 00    # vload 0            # d
10 10    # bipush 16          # 16
A1 00 06 # if_icmplt +6       # if (d < 16) goto <13:then>
A7 00 15 # goto +21           # goto <14:else>
# <13:then>
10 41    # bipush 65          # 'A'
B7 00 01 # invokenative 1     # char_ord('A')
15 00    # vload 0            # d
10 0A    # bipush 10          # 10
64       # isub               # (d - 10)
60       # iadd               # (char_ord('A') + (d - 10))
B7 00 00 # invokenative 0     # char_chr((char_ord('A') + (d - 10)))
B0       # return             # 
A7 00 06 # goto +6            # goto <15:endif>
# <14:else>
10 3F    # bipush 63          # '\?'
B0       # return             # 
# <15:endif>
# <11:endif>


#<ssa_print_unsafe>
01                # number of arguments = 1
03                # number of local variables = 3
00 6F             # code length = 111 bytes
15 00    # vload 0            # A
62 08    # aaddf 8            # &A->length
2E       # imload             # A->length
36 01    # vstore 1           # len = A->length;
14 00 00 # aldc 0             # s[0] = "SSA length="
B7 00 03 # invokenative 3     # print("SSA length=")
57       # pop                # (ignore result)
15 01    # vload 1            # len
B7 00 04 # invokenative 4     # printint(len)
57       # pop                # (ignore result)
14 00 0C # aldc 12            # s[12] = "; data=["
B7 00 03 # invokenative 3     # print("; data=[")
57       # pop                # (ignore result)
10 00    # bipush 0           # 0
36 02    # vstore 2           # i = 0;
# <20:loop>
15 02    # vload 2            # i
15 01    # vload 1            # len
A1 00 06 # if_icmplt +6       # if (i < len) goto <21:body>
A7 00 3F # goto +63           # goto <22:exit>
# <21:body>
14 00 15 # aldc 21            # s[21] = ""
B7 00 03 # invokenative 3     # print("")
57       # pop                # (ignore result)
15 00    # vload 0            # A
62 00    # aaddf 0            # &A->data
2F       # amload             # A->data
15 02    # vload 2            # i
63       # aadds              # &A->data[i]
2F       # amload             # A->data[i]
B7 00 03 # invokenative 3     # print(A->data[i])
57       # pop                # (ignore result)
14 00 16 # aldc 22            # s[22] = ""
B7 00 03 # invokenative 3     # print("")
57       # pop                # (ignore result)
15 02    # vload 2            # i
15 01    # vload 1            # len
10 01    # bipush 1           # 1
64       # isub               # (len - 1)
A1 00 06 # if_icmplt +6       # if (i < (len - 1)) goto <23:then>
A7 00 0D # goto +13           # goto <24:else>
# <23:then>
14 00 17 # aldc 23            # s[23] = ", "
B7 00 03 # invokenative 3     # print(", ")
57       # pop                # (ignore result)
A7 00 03 # goto +3            # goto <25:endif>
# <24:else>
# <25:endif>
15 02    # vload 2            # i
10 01    # bipush 1           # 1
60       # iadd               # 
36 02    # vstore 2           # i += 1;
A7 FF BD # goto -67           # goto <20:loop>
# <22:exit>
14 00 1A # aldc 26            # s[26] = "]"
B7 00 03 # invokenative 3     # print("]")
57       # pop                # (ignore result)
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<swap>
03                # number of arguments = 3
04                # number of local variables = 4
00 1F             # code length = 31 bytes
15 00    # vload 0            # D
15 01    # vload 1            # i
63       # aadds              # &D[i]
2F       # amload             # D[i]
36 03    # vstore 3           # tmp = D[i];
15 00    # vload 0            # D
15 01    # vload 1            # i
63       # aadds              # &D[i]
15 00    # vload 0            # D
15 02    # vload 2            # j
63       # aadds              # &D[j]
2F       # amload             # D[j]
4F       # amstore            # D[i] = D[j];
15 00    # vload 0            # D
15 02    # vload 2            # j
63       # aadds              # &D[j]
15 03    # vload 3            # tmp
4F       # amstore            # D[j] = tmp;
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<is_array_expected_length>
02                # number of arguments = 2
02                # number of local variables = 2
00 03             # code length = 3 bytes
10 01    # bipush 1           # true
B0       # return             # 


#<is_sorted>
03                # number of arguments = 3
04                # number of local variables = 4
00 3E             # code length = 62 bytes
15 01    # vload 1            # lo
36 03    # vstore 3           # i = lo;
# <26:loop>
15 03    # vload 3            # i
15 02    # vload 2            # hi
10 01    # bipush 1           # 1
64       # isub               # (hi - 1)
A1 00 06 # if_icmplt +6       # if (i < (hi - 1)) goto <27:body>
A7 00 2D # goto +45           # goto <28:exit>
# <27:body>
15 00    # vload 0            # A
15 03    # vload 3            # i
63       # aadds              # &A[i]
2F       # amload             # A[i]
15 00    # vload 0            # A
15 03    # vload 3            # i
10 01    # bipush 1           # 1
60       # iadd               # (i + 1)
63       # aadds              # &A[(i + 1)]
2F       # amload             # A[(i + 1)]
B7 00 05 # invokenative 5     # string_compare(A[i], A[(i + 1)])
10 00    # bipush 0           # 0
A3 00 06 # if_icmpgt +6       # if (string_compare(A[i], A[(i + 1)]) > 0) goto <29:then>
A7 00 09 # goto +9            # goto <30:else>
# <29:then>
10 00    # bipush 0           # false
B0       # return             # 
A7 00 03 # goto +3            # goto <31:endif>
# <30:else>
# <31:endif>
15 03    # vload 3            # i
10 01    # bipush 1           # 1
60       # iadd               # 
36 03    # vstore 3           # i += 1;
A7 FF CC # goto -52           # goto <26:loop>
# <28:exit>
10 01    # bipush 1           # true
B0       # return             # 


#<is_ssa>
01                # number of arguments = 1
01                # number of local variables = 1
00 33             # code length = 51 bytes
15 00    # vload 0            # A
01       # aconst_null        # NULL
A0 00 06 # if_cmpne +6        # if (A != NULL) goto <35:and>
A7 00 2A # goto +42           # goto <33:cond_false>
# <35:and>
15 00    # vload 0            # A
62 00    # aaddf 0            # &A->data
2F       # amload             # A->data
15 00    # vload 0            # A
62 08    # aaddf 8            # &A->length
2E       # imload             # A->length
B8 00 0B # invokestatic 11    # is_array_expected_length(A->data, A->length)
10 01    # bipush 1           # true
9F 00 06 # if_cmpeq +6        # if (is_array_expected_length(A->data, A->length) == true) goto <32:cond_true>
A7 00 15 # goto +21           # goto <33:cond_false>
# <32:cond_true>
15 00    # vload 0            # A
62 00    # aaddf 0            # &A->data
2F       # amload             # A->data
10 00    # bipush 0           # 0
15 00    # vload 0            # A
62 08    # aaddf 8            # &A->length
2E       # imload             # A->length
B8 00 0C # invokestatic 12    # is_sorted(A->data, 0, A->length)
A7 00 05 # goto +5            # goto <34:cond_end>
# <33:cond_false>
10 00    # bipush 0           # false
# <34:cond_end>
B0       # return             # 


#<ssa_print_internal>
01                # number of arguments = 1
01                # number of local variables = 1
00 09             # code length = 9 bytes
15 00    # vload 0            # A
B8 00 09 # invokestatic 9     # ssa_print_unsafe(A)
57       # pop                # (ignore result)
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<ssa_len>
01                # number of arguments = 1
01                # number of local variables = 1
00 06             # code length = 6 bytes
15 00    # vload 0            # A
62 08    # aaddf 8            # &A->length
2E       # imload             # A->length
B0       # return             # 


#<ssa_get>
02                # number of arguments = 2
02                # number of local variables = 2
00 0A             # code length = 10 bytes
15 00    # vload 0            # A
62 00    # aaddf 0            # &A->data
2F       # amload             # A->data
15 01    # vload 1            # i
63       # aadds              # &A->data[i]
2F       # amload             # A->data[i]
B0       # return             # 


#<ssa_set>
03                # number of arguments = 3
04                # number of local variables = 4
00 A4             # code length = 164 bytes
15 00    # vload 0            # A
62 00    # aaddf 0            # &A->data
2F       # amload             # A->data
15 01    # vload 1            # i
63       # aadds              # &A->data[i]
15 02    # vload 2            # x
4F       # amstore            # A->data[i] = x;
15 01    # vload 1            # i
36 03    # vstore 3           # j = i;
# <36:loop>
15 03    # vload 3            # j
15 00    # vload 0            # A
62 08    # aaddf 8            # &A->length
2E       # imload             # A->length
10 01    # bipush 1           # 1
64       # isub               # (A->length - 1)
A1 00 06 # if_icmplt +6       # if (j < (A->length - 1)) goto <39:and>
A7 00 3D # goto +61           # goto <38:exit>
# <39:and>
15 00    # vload 0            # A
62 00    # aaddf 0            # &A->data
2F       # amload             # A->data
15 03    # vload 3            # j
63       # aadds              # &A->data[j]
2F       # amload             # A->data[j]
15 00    # vload 0            # A
62 00    # aaddf 0            # &A->data
2F       # amload             # A->data
15 03    # vload 3            # j
10 01    # bipush 1           # 1
60       # iadd               # (j + 1)
63       # aadds              # &A->data[(j + 1)]
2F       # amload             # A->data[(j + 1)]
B7 00 05 # invokenative 5     # string_compare(A->data[j], A->data[(j + 1)])
10 00    # bipush 0           # 0
A3 00 06 # if_icmpgt +6       # if (string_compare(A->data[j], A->data[(j + 1)]) > 0) goto <37:body>
A7 00 1D # goto +29           # goto <38:exit>
# <37:body>
15 00    # vload 0            # A
62 00    # aaddf 0            # &A->data
2F       # amload             # A->data
15 03    # vload 3            # j
15 03    # vload 3            # j
10 01    # bipush 1           # 1
60       # iadd               # (j + 1)
B8 00 0A # invokestatic 10    # swap(A->data, j, (j + 1))
57       # pop                # (ignore result)
15 03    # vload 3            # j
10 01    # bipush 1           # 1
60       # iadd               # 
36 03    # vstore 3           # j += 1;
A7 FF B9 # goto -71           # goto <36:loop>
# <38:exit>
15 01    # vload 1            # i
36 03    # vstore 3           # j = i;
# <40:loop>
15 03    # vload 3            # j
10 00    # bipush 0           # 0
A3 00 06 # if_icmpgt +6       # if (j > 0) goto <43:and>
A7 00 3D # goto +61           # goto <42:exit>
# <43:and>
15 00    # vload 0            # A
62 00    # aaddf 0            # &A->data
2F       # amload             # A->data
15 03    # vload 3            # j
63       # aadds              # &A->data[j]
2F       # amload             # A->data[j]
15 00    # vload 0            # A
62 00    # aaddf 0            # &A->data
2F       # amload             # A->data
15 03    # vload 3            # j
10 01    # bipush 1           # 1
64       # isub               # (j - 1)
63       # aadds              # &A->data[(j - 1)]
2F       # amload             # A->data[(j - 1)]
B7 00 05 # invokenative 5     # string_compare(A->data[j], A->data[(j - 1)])
10 00    # bipush 0           # 0
A1 00 06 # if_icmplt +6       # if (string_compare(A->data[j], A->data[(j - 1)]) < 0) goto <41:body>
A7 00 1D # goto +29           # goto <42:exit>
# <41:body>
15 00    # vload 0            # A
62 00    # aaddf 0            # &A->data
2F       # amload             # A->data
15 03    # vload 3            # j
15 03    # vload 3            # j
10 01    # bipush 1           # 1
64       # isub               # (j - 1)
B8 00 0A # invokestatic 10    # swap(A->data, j, (j - 1))
57       # pop                # (ignore result)
15 03    # vload 3            # j
10 01    # bipush 1           # 1
64       # isub               # 
36 03    # vstore 3           # j -= 1;
A7 FF BF # goto -65           # goto <40:loop>
# <42:exit>
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<ssa_new>
01                # number of arguments = 1
02                # number of local variables = 2
00 17             # code length = 23 bytes
BB 10    # new 16             # alloc(ssa)
36 01    # vstore 1           # A = alloc(ssa);
15 01    # vload 1            # A
62 00    # aaddf 0            # &A->data
15 00    # vload 0            # size
BC 08    # newarray 8         # alloc_array(string, size)
4F       # amstore            # A->data = alloc_array(string, size);
15 01    # vload 1            # A
62 08    # aaddf 8            # &A->length
15 00    # vload 0            # size
4E       # imstore            # A->length = size;
15 01    # vload 1            # A
B0       # return             # 


#<ssa_print>
01                # number of arguments = 1
03                # number of local variables = 3
00 62             # code length = 98 bytes
15 00    # vload 0            # A
62 08    # aaddf 8            # &A->length
2E       # imload             # A->length
36 01    # vstore 1           # len = A->length;
14 00 1C # aldc 28            # s[28] = "SSA: ["
B7 00 03 # invokenative 3     # print("SSA: [")
57       # pop                # (ignore result)
10 00    # bipush 0           # 0
36 02    # vstore 2           # i = 0;
# <44:loop>
15 02    # vload 2            # i
15 01    # vload 1            # len
A1 00 06 # if_icmplt +6       # if (i < len) goto <45:body>
A7 00 3F # goto +63           # goto <46:exit>
# <45:body>
14 00 23 # aldc 35            # s[35] = ""
B7 00 03 # invokenative 3     # print("")
57       # pop                # (ignore result)
15 00    # vload 0            # A
62 00    # aaddf 0            # &A->data
2F       # amload             # A->data
15 02    # vload 2            # i
63       # aadds              # &A->data[i]
2F       # amload             # A->data[i]
B7 00 03 # invokenative 3     # print(A->data[i])
57       # pop                # (ignore result)
14 00 24 # aldc 36            # s[36] = ""
B7 00 03 # invokenative 3     # print("")
57       # pop                # (ignore result)
15 02    # vload 2            # i
15 01    # vload 1            # len
10 01    # bipush 1           # 1
64       # isub               # (len - 1)
A1 00 06 # if_icmplt +6       # if (i < (len - 1)) goto <47:then>
A7 00 0D # goto +13           # goto <48:else>
# <47:then>
14 00 25 # aldc 37            # s[37] = ", "
B7 00 03 # invokenative 3     # print(", ")
57       # pop                # (ignore result)
A7 00 03 # goto +3            # goto <49:endif>
# <48:else>
# <49:endif>
15 02    # vload 2            # i
10 01    # bipush 1           # 1
60       # iadd               # 
36 02    # vstore 2           # i += 1;
A7 FF BD # goto -67           # goto <44:loop>
# <46:exit>
14 00 28 # aldc 40            # s[40] = "]"
B7 00 03 # invokenative 3     # print("]")
57       # pop                # (ignore result)
10 00    # bipush 0           # dummy return value
B0       # return             # 


#<display_this_ssa>
01                # number of arguments = 1
02                # number of local variables = 2
00 4B             # code length = 75 bytes
14 00 2A # aldc 42            # s[42] = "\n"
B7 00 03 # invokenative 3     # print("\n")
57       # pop                # (ignore result)
10 00    # bipush 0           # 0
36 01    # vstore 1           # j = 0;
# <50:loop>
15 01    # vload 1            # j
15 00    # vload 0            # A
B8 00 0F # invokestatic 15    # ssa_len(A)
A1 00 06 # if_icmplt +6       # if (j < ssa_len(A)) goto <51:body>
A7 00 33 # goto +51           # goto <52:exit>
# <51:body>
14 00 2C # aldc 44            # s[44] = ""
B7 00 03 # invokenative 3     # print("")
57       # pop                # (ignore result)
15 01    # vload 1            # j
B7 00 04 # invokenative 4     # printint(j)
57       # pop                # (ignore result)
14 00 2D # aldc 45            # s[45] = " => "
B7 00 03 # invokenative 3     # print(" => ")
57       # pop                # (ignore result)
15 00    # vload 0            # A
15 01    # vload 1            # j
B8 00 10 # invokestatic 16    # ssa_get(A, j)
B7 00 03 # invokenative 3     # print(ssa_get(A, j))
57       # pop                # (ignore result)
14 00 32 # aldc 50            # s[50] = "\n"
B7 00 03 # invokenative 3     # print("\n")
57       # pop                # (ignore result)
15 01    # vload 1            # j
10 01    # bipush 1           # 1
60       # iadd               # 
36 01    # vstore 1           # j += 1;
A7 FF C6 # goto -58           # goto <50:loop>
# <52:exit>
10 00    # bipush 0           # dummy return value
B0       # return             # 

00 06             # native count
# native pool
00 01 00 5B       # char_chr
00 01 00 5C       # char_ord
00 01 00 60       # string_from_chararray
00 01 00 06       # print
00 01 00 09       # printint
00 02 00 5E       # string_compare

