#use <conio>
#use <util>
#use <parse>

void run_testcase(string A_as_str, string B_as_str, string Expected_as_str)
//@requires int_tokens(A_as_str, 10);
//@requires int_tokens(B_as_str, 10);
//@requires int_tokens(Expected_as_str, 10);
{
  // Parse strings to int arrays
  int[] A = parse_ints(A_as_str, 10);
  int a_len = num_tokens(A_as_str);
  //@assert \length(A) == a_len;
  int[] B = parse_ints(B_as_str, 10);
  int b_len = num_tokens(B_as_str);
  //@assert \length(B) == b_len;
  int[] Expected = parse_ints(Expected_as_str, 10);
  int expected_len = num_tokens(Expected_as_str);
  //@assert \length(Expected) == expected_len;

  // Compute the intersection
  int size = min(a_len, b_len) ; // Fill me in!
  int[] Intersection = alloc_array(int, size);
  int len = intersect(A, a_len, B, b_len, Intersection);

  // Assert that result is correct
  assert(arr_eq(Intersection, len, Expected, expected_len));
}


void run_tests() {
    // Remember - this function should call run testcase a bunch of times!

    // BASIC CASES
    run_testcase("", "", "");
    printf("HERE\n");
    run_testcase("0", "0", "0");
    printf("HERE\n");
    run_testcase("0 0", "0 0", "0");
    printf("HERE\n");
    run_testcase("-1 2 3", "1 2 3", "2 3");
    printf("HERE\n");
    run_testcase("-1 5 4", "3 -1 5", "-1 5");
    printf("HERE\n");
    run_testcase("0", "", "");
    printf("HERE\n");
    run_testcase("", "0", "");
    printf("HERE\n");
    run_testcase("1", "2", "");
    printf("HERE\n");
    run_testcase("1", "1", "1");
    printf("HERE\n");
    run_testcase("0 1 2", "0 2 2", "0 2");
    printf("HERE\n");
    run_testcase("1 1 0 0", "2 2 0 0", "0");
    printf("HERE\n");
    run_testcase("", "1 2 3 4 5", "");
    printf("HERE\n");
    run_testcase("1 2 3 4 5", "", "");
    printf("HERE\n");
    run_testcase("0 1 2", "3 4 5", "");
    printf("HERE\n");
    run_testcase("3 4 5", "5 4 3", "3 4 5");
    printf("HERE\n");
    run_testcase("1 2 3 4 5", "1 3 5", "1 3 5");
    printf("HERE\n");
    run_testcase("1 2 3 4 5", "1 2 3 4 5", "1 2 3 4 5");
    printf("HERE\n");
    run_testcase("1 2 3 4 5", "1 2 3 4 6", "1 2 3 4");
    printf("HERE\n");
    run_testcase("1 2 4 5 6", "1 2 3 4 5", "1 2 4 5");
    printf("HERE\n");
    run_testcase("1 2 3 4 5 6 7 8", "9 10 11 12 13 14 15", "");
    printf("PASSED ALL BASIC CASES\n");

    // DOUBLE COUNTING CASES
    run_testcase("1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1", "1");
    printf("HERE\n");
    run_testcase("1 3 5 1 3 5", "1 3 5 1 3 5", "1 3 5");
    printf("HERE\n");
    run_testcase("1 1 2 2 3 3", "1 2 3", "1 2 3");
    printf("HERE\n");
    run_testcase("1 1", "1 1", "1");
    printf("HERE\n");
    run_testcase("1 1", "1 2", "1");
    printf("HERE\n");
    run_testcase("1 1 1", "1 1 2", "1");
    printf("HERE2\n");
    run_testcase("1 2 3 2 1", "2 2", "2");
    printf("HERE\n");
    run_testcase("5 4 3 2 1", "1 6 4 3 2 5", "1 2 3 4 5");
    printf("PASSED ALL DOUBLE COUNTING CASES\n");
}
