/*
 * Hash sets, implemented with separate chaining
 *
 * 15-122 Principles of Imperative Computation
 */

#use <string>
#use <conio>
#use <rand>


// LCG hash of strings
int hash_string(string s) {
  int h = 0;
  int len = string_length(s);
  //  rand_t random = init_rand(0xFEEDFACE);
  for (int i = 0; i < len ; i++)
  //@loop_invariant 0 <= i;
  {
    // do something with the current char and h
    //    h = h * rand(random);
    h = h + char_ord(string_charat(s,i));
  }
  return h;
}

struct produce {
  string color;
  string fruit;
};

bool elem_equiv(struct produce* x, struct produce* y)
//@requires x != NULL && y != NULL;
{
  return string_equal(x->color, y->color)
      && string_equal(x->fruit, y->fruit);
  // What if we only compare fruit fields (and leave hash function alone)?
}

int elem_hash(struct produce* x)
//@requires x != NULL;
{
  return hash_string(string_join(string_join(x->color, " "), x->fruit));
  // What if we only hash fruit field (and leave equality function alone)?
}

struct produce* produce(string color, string fruit)
//@ensures \result != NULL;
{
  struct produce* x = alloc(struct produce);
  x->color = color;
  x->fruit = fruit;
  return x;
}

void elem_print(struct produce* x)
//@requires x != NULL;
{
  printf("Looks like a %s that is %s\n", x->fruit, x->color);
}

typedef struct produce* elem;
