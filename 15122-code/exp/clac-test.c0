/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2023                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
#use <conio>

bool test_prog(string input, int output) {
  queue_t Q = tokenize(input);
  istack_t S = istack_new();
  eval(S, Q);
  if (istack_empty(S)) return false;
  int i = ipop(S);
  if (!istack_empty(S)) return false;
  return i == output;
}

int main() {
  assert(test_prog("3 4 * -9 2 / +", 8));
  // Add more tests of your own!

  // single operation tests
  assert(test_prog("1 1 +", 2));
  assert(test_prog("-1 1 +", 0));
  assert(test_prog("1 0 +", 1));
  assert(test_prog("0 1 +", 1));

  assert(test_prog("1 1 -", 0));
  assert(test_prog("-1 1 -", -2));
  assert(test_prog("1 -1 -", 2));
  assert(test_prog("1 0 -", 1));
  assert(test_prog("0 1 -", -1));

  assert(test_prog("1 0 *", 0));
  assert(test_prog("0 1 *", 0));
  assert(test_prog("1 1 *", 1));
  assert(test_prog("-1 1 *", -1));
  assert(test_prog("1 -1 *", -1));
  assert(test_prog("-1 -1 *", 1));

  assert(test_prog("1 1 /", 1));
  assert(test_prog("-1 1 /", -1));
  assert(test_prog("1 -1 /", -1));
  assert(test_prog("-1 -1 /", 1));
  assert(test_prog("0 1 /", 0));

  assert(test_prog("1 0 **", 1));
  assert(test_prog("1 1 **", 1));
  assert(test_prog("-1 1 **", -1));
  assert(test_prog("-1 2 **", 1));
  assert(test_prog("-1 3 **", -1));
  assert(test_prog("2 2 **", 4));
  assert(test_prog("2 3 **", 8));

  // multiple operation tests
  assert(test_prog("-2 2 + 3 1 * /", 0));
  assert(test_prog("-2 3 + 3 1 * *", 3));
  assert(test_prog("-2 3 + 3 1 * **", 1));

  printf("All tests passed!\n");
  return 0;
}
