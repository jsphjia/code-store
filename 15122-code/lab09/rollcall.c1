#use <string>

struct student_info {
  /* WRITE ME */
  string andrew_id;
  int days_present;
  int days_absent;
};
typedef struct student_info student;  // WRITE ME

key get_andrewid(entry e)
// WRITE GOOD CONTRACTS
//@requires e != NULL && \hastag(student*, e);
//@ensures \result != NULL && \hastag(string*, \result);
{
  /* WRITE ME */
  string* id = alloc(string);
  student* stu = (student*) e;
  *id = stu->andrew_id;
  return (void*) id;  // BOGUS
}

int hash_andrewid(key k)
// WRITE GOOD CONTRACTS
//@requires k != NULL && \hastag(string*, k);
{
  /* WRITE ME */
  string* id = (string*) k;
  string s = *id;

  int len = string_length(s);
  int sum = 0;

  for(int i = 0; i < len; i++)
  {
      sum += char_ord(string_charat(s, i));
      sum = 1664525 * sum + 1013904223;
  }
  
  return sum;  // BOGUS
}

bool same_andrewid(key x, key y)
// WRITE GOOD CONTRACTS
//@requires x != NULL && \hastag(string*, x);
//@requires y != NULL && \hastag(string*, y);
{
  /* WRITE ME */
  return hash_andrewid(x) == hash_andrewid(y);  // BOGUS
}

hdict_t new_roster(string[] andrew_ids, int len)
//@requires \length(andrew_ids) == len;
// MORE CONTRACTS?
{
  /* WRITE ME */
  hdict_t h = hdict_new(len, &get_andrewid, &hash_andrewid, &same_andrewid);

  for(int i = 0; i < len; i++)
  {
    student* stu = alloc(student);
    stu->andrew_id = andrew_ids[i];
    stu->days_present = 0;
    stu->days_absent = 0;
    hdict_insert(h, (void*)stu);
  }

  return h;
}

// ONLY LIBRARY INTERFACE FUNCTIONS MUST BE USED FOR THE FOLLOWING

void mark_present(hdict_t H, string andrew_id)
//@requires H != NULL;
{
  /* WRITE ME */
  string* id = alloc(string);
  *id = andrew_id;
  entry e = hdict_lookup(H, (void*) id);
  student* stu = (student*) e;
  stu->days_present++;
}

void mark_absent(hdict_t H, string andrew_id)
//@requires H != NULL;
{
  /* WRITE ME */
  string* id = alloc(string);
  *id = andrew_id;
  entry e = hdict_lookup(H, (void*) id);
  student* stu = (student*) e;
  stu->days_absent++;
}

// int main()
// {
//   return 0;
// }
